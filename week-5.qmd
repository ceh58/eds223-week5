---
title: "Week 5"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(sf)
library(terra)
library(tidyverse)
library(tmap)
library(spData)
library(spDataLarge)
```

```{r}
# raster data
elevation <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))

#vector data
boundary <- read_sf(system.file("vector/zion.gpkg", package = "spDataLarge"))
```

```{r}
# check if CRS match
if(crs(elevation) == crs(boundary)) {
  print("CRS match, good to go!")
} else{
  warning("Update CRS to match")
  boundary <- st_transform(boundary, st_crs(elevation))
}
```

```{r}
tm_shape(elevation) +
  tm_raster(title = "Elevation (m)") +
  tm_shape(boundary) +
  tm_borders(lwd = 2) +
  tm_layout(legend.outside = TRUE)
```

```{r}
# crop raster to the extent of vector object
elevation_cropped <- terra::crop(elevation, boundary)
```

```{r}
tm_shape(elevation_cropped) +
  tm_raster(title = "Elevation (m)") +
  tm_shape(boundary) +
  tm_borders(lwd = 2) +
  tm_layout(legend.outside = TRUE)
```

```{r}
# mask raster based on vector object
# convert cells outside the park to NA
elevation_mask <- terra::mask(elevation_cropped, boundary)

tm_shape(elevation_mask) +
  tm_raster(title = "Elevation (m)") +
  tm_shape(boundary) +
  tm_borders(lwd = 2) +
  tm_layout(legend.outside = TRUE)
```

```{r}
# mask raster based on vector object
# convert cells outside of the park to NA

elevation_inverse_mask <- terra::mask(elevation_cropped, boundary, inverse = TRUE)

tm_shape(elevation_inverse_mask) +
  tm_raster(title = "Elevation (m)") +
  tm_shape(boundary) +
  tm_borders(lwd = 2) +
  tm_layout(legend.outside = TRUE)
```

```{r}
# masking to cells inside boundary
elevation_inside <- mask(elevation_cropped, boundary)

# create a mask based on values of cells
elevation_mask <- elevation_inside
elevation_mask[elevation_mask < 2000] <- NA

tm_shape(elevation_mask) +
  tm_raster() +
  tm_shape(boundary) +
  tm_borders() +
  tm_layout(legend.outside = TRUE)

elevation_mask_poly <- terra::as.polygons(elevation_mask) %>%
  st_as_sf()

tm_shape(elevation_mask_poly) +
  tm_polygons() +
  tm_shape(boundary) +
  tm_borders() +
  tm_layout(legend.outside = TRUE)
```


